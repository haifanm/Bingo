{"version":3,"sources":["Components/BingoChecker.js","Components/ComputerChoice.js","Components/ComputerPlayer.js","Components/GenerateGrid.js","Components/FinalTable.js","Components/BingoTable.js","Components/App.js","serviceWorker.js","index.js"],"names":["BingoChecker","currentItems","completedLines","picked","fourOne","computerGrid","a","b","c","d","e","number","threeTwo","ComputerChoice","x","chooseComputerIndex","specificNumber","randomIndex","Math","floor","random","alreadyAdded","grid","i","length","GenerateGrid","randomNumber","randomItem","newGrid","push","console","log","FinalTable","player","bingo","className","GridList","cellHeight","spacing","cols","map","item","GridListTile","gained","key","letter","rows","style","flex","Bingo","pick","pickedNumber","newPlayerList","state","items","setState","checkForBingoUpdate","newComputerList","j","computerCheckForBingoUpdate","computerTurn","currentBingoScore","outputBingoState","newBingoList","gameEnded","winner","playerScore","computerPick","computerChosenNumber","computerOutputBingoState","newComputerBingoList","computerBingo","winnerMessage","winnerMessageColor","sleep","ms","Promise","resolve","setTimeout","gameRestart","this","Button","variant","color","onClick","window","confirm","fontSize","height","padding","margin","disabled","onMouseDown","toggleTouched","onMouseUp","handleMouseUp","border","isOpen","contentLabel","marginBottom","paddingBottom","Component","App","BingoTable","backgroundColor","href","target","rel","position","right","bottom","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a170eb0.chunk.js","sourcesContent":["function BingoChecker(currentItems) {\r\n  let completedLines = 0;\r\n  if (\r\n    currentItems[0].picked &&\r\n    currentItems[5].picked &&\r\n    currentItems[10].picked &&\r\n    currentItems[15].picked &&\r\n    currentItems[20].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[1].picked &&\r\n    currentItems[6].picked &&\r\n    currentItems[11].picked &&\r\n    currentItems[16].picked &&\r\n    currentItems[21].picked\r\n  )\r\n    completedLines++;\r\n  if (\r\n    currentItems[2].picked &&\r\n    currentItems[7].picked &&\r\n    currentItems[12].picked &&\r\n    currentItems[17].picked &&\r\n    currentItems[22].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[3].picked &&\r\n    currentItems[8].picked &&\r\n    currentItems[13].picked &&\r\n    currentItems[18].picked &&\r\n    currentItems[23].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[4].picked &&\r\n    currentItems[9].picked &&\r\n    currentItems[14].picked &&\r\n    currentItems[19].picked &&\r\n    currentItems[24].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[0].picked &&\r\n    currentItems[1].picked &&\r\n    currentItems[2].picked &&\r\n    currentItems[3].picked &&\r\n    currentItems[4].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[5].picked &&\r\n    currentItems[6].picked &&\r\n    currentItems[7].picked &&\r\n    currentItems[8].picked &&\r\n    currentItems[9].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[10].picked &&\r\n    currentItems[11].picked &&\r\n    currentItems[12].picked &&\r\n    currentItems[13].picked &&\r\n    currentItems[14].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[15].picked &&\r\n    currentItems[16].picked &&\r\n    currentItems[17].picked &&\r\n    currentItems[18].picked &&\r\n    currentItems[19].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[20].picked &&\r\n    currentItems[21].picked &&\r\n    currentItems[22].picked &&\r\n    currentItems[23].picked &&\r\n    currentItems[24].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[0].picked &&\r\n    currentItems[6].picked &&\r\n    currentItems[12].picked &&\r\n    currentItems[18].picked &&\r\n    currentItems[24].picked\r\n  )\r\n    completedLines++;\r\n\r\n  if (\r\n    currentItems[4].picked &&\r\n    currentItems[8].picked &&\r\n    currentItems[12].picked &&\r\n    currentItems[16].picked &&\r\n    currentItems[20].picked\r\n  )\r\n    completedLines++;\r\n  return completedLines;\r\n}\r\n\r\nexport default BingoChecker;\r\n","function ComputerChoice(computerGrid) {\r\n  //vertical #1\r\n  let x = fourOne(computerGrid, 0, 5, 10, 15, 20);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #2\r\n  x = fourOne(computerGrid, 1, 6, 11, 16, 21);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #3\r\n  x = fourOne(computerGrid, 2, 7, 12, 17, 22);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #4\r\n  x = fourOne(computerGrid, 3, 8, 13, 18, 23);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #5\r\n  x = fourOne(computerGrid, 4, 9, 14, 19, 24);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #1\r\n  x = fourOne(computerGrid, 0, 1, 2, 3, 4);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #2\r\n  x = fourOne(computerGrid, 5, 6, 7, 8, 9);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #3\r\n  x = fourOne(computerGrid, 10, 11, 12, 13, 14);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #4\r\n  x = fourOne(computerGrid, 15, 16, 17, 18, 19);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #5\r\n  x = fourOne(computerGrid, 20, 21, 22, 23, 24);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #1\r\n  x = threeTwo(computerGrid, 0, 5, 10, 15, 20);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #2\r\n  x = threeTwo(computerGrid, 1, 6, 11, 16, 21);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #3\r\n  x = threeTwo(computerGrid, 2, 7, 12, 17, 22);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #4\r\n  x = threeTwo(computerGrid, 3, 8, 13, 18, 23);\r\n  if (x >= 0) return x;\r\n\r\n  //vertical #5\r\n  x = threeTwo(computerGrid, 4, 9, 14, 19, 24);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #1\r\n  x = threeTwo(computerGrid, 0, 1, 2, 3, 4);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #2\r\n  x = threeTwo(computerGrid, 5, 6, 7, 8, 9);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #3\r\n  x = threeTwo(computerGrid, 10, 11, 12, 13, 14);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #4\r\n  x = threeTwo(computerGrid, 15, 16, 17, 18, 19);\r\n  if (x >= 0) return x;\r\n\r\n  //horizontal #5\r\n  x = threeTwo(computerGrid, 20, 21, 22, 23, 24);\r\n  if (x >= 0) return x;\r\n\r\n  return -1;\r\n}\r\n\r\nfunction fourOne(computerGrid, a, b, c, d, e) {\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[b].picked &&\r\n    computerGrid[c].picked &&\r\n    computerGrid[d].picked &&\r\n    !computerGrid[e].picked\r\n  )\r\n    return computerGrid[e].number;\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[b].picked &&\r\n    computerGrid[c].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[d].picked\r\n  )\r\n    return computerGrid[d].number;\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[b].picked &&\r\n    computerGrid[d].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[c].picked\r\n  )\r\n    return computerGrid[c].number;\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[c].picked &&\r\n    computerGrid[d].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[b].picked\r\n  )\r\n    return computerGrid[b].number;\r\n  if (\r\n    computerGrid[b].picked &&\r\n    computerGrid[c].picked &&\r\n    computerGrid[d].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[a].picked\r\n  )\r\n    return computerGrid[a].number;\r\n}\r\n\r\nfunction threeTwo(computerGrid, a, b, c, d, e) {\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[b].picked &&\r\n    computerGrid[c].picked &&\r\n    !computerGrid[d].picked &&\r\n    !computerGrid[e].picked\r\n  )\r\n    return computerGrid[d].number;\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[b].picked &&\r\n    computerGrid[d].picked &&\r\n    !computerGrid[c].picked &&\r\n    !computerGrid[e].picked\r\n  )\r\n    return computerGrid[c].number;\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[b].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[c].picked &&\r\n    !computerGrid[d].picked\r\n  )\r\n    return computerGrid[c].number;\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[c].picked &&\r\n    computerGrid[d].picked &&\r\n    !computerGrid[b].picked &&\r\n    !computerGrid[e].picked\r\n  )\r\n    return computerGrid[b].number;\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[c].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[b].picked &&\r\n    !computerGrid[d].picked\r\n  )\r\n    return computerGrid[b].number;\r\n  if (\r\n    computerGrid[a].picked &&\r\n    computerGrid[d].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[b].picked &&\r\n    !computerGrid[c].picked\r\n  )\r\n    return computerGrid[b].number;\r\n\r\n  if (\r\n    computerGrid[b].picked &&\r\n    computerGrid[c].picked &&\r\n    computerGrid[d].picked &&\r\n    !computerGrid[a].picked &&\r\n    !computerGrid[e].picked\r\n  )\r\n    return computerGrid[a].number;\r\n\r\n  if (\r\n    computerGrid[b].picked &&\r\n    computerGrid[c].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[a].picked &&\r\n    !computerGrid[d].picked\r\n  )\r\n    return computerGrid[a].number;\r\n\r\n  if (\r\n    computerGrid[c].picked &&\r\n    computerGrid[d].picked &&\r\n    computerGrid[e].picked &&\r\n    !computerGrid[a].picked &&\r\n    !computerGrid[b].picked\r\n  )\r\n    return computerGrid[a].number;\r\n\r\n  return -1;\r\n}\r\nexport default ComputerChoice;\r\n","// import React from \"react\";\r\nimport ComputerChoice from \"./ComputerChoice\";\r\n\r\n/*  this function:\r\n1- takes the current status of the computer grid, \r\n2- chooses a number to play, \r\n3- updates its grid and returns it    */\r\n\r\nfunction chooseComputerIndex(computerGrid) {\r\n  //chooses the number in the grid (not the index) to be played by the computer and returns it\r\n\r\n  let specificNumber = ComputerChoice(computerGrid);\r\n  // console.log(specificNumber);\r\n  if (specificNumber > 0) {\r\n    return specificNumber;\r\n  }\r\n  var min = 0;\r\n  var max = 24;\r\n  var randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\r\n  // console.log(\r\n  //   \"randomIndex\" +\r\n  //     randomIndex +\r\n  //     \" randomNumber \" +\r\n  //     computerGrid[randomIndex].number +\r\n  //     \" picked \" +\r\n  //     computerGrid[randomIndex].picked\r\n  // );\r\n  while (computerGrid[randomIndex].picked) {\r\n    // console.log(\r\n    //   \"randomIndex\" +\r\n    //     randomIndex +\r\n    //     \" randomNumber \" +\r\n    //     computerGrid[randomIndex].number +\r\n    //     \" picked \" +\r\n    //     computerGrid[randomIndex].picked\r\n    // );\r\n    randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  return computerGrid[randomIndex].number;\r\n}\r\n\r\nexport default chooseComputerIndex;\r\n","function GenerateGrid() {\r\n  var min = 1;\r\n  var max = 25;\r\n\r\n  //fisrt tile in the grid\r\n  let randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n  let randomItem = { number: randomNumber, picked: false };\r\n  let newGrid = [randomItem];\r\n\r\n  //\r\n  for (let i = 0; i < 24; i++) {\r\n    randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n    while (alreadyAdded(newGrid, randomNumber)) {\r\n      randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    randomItem = { number: randomNumber, picked: false };\r\n\r\n    //append this new item to the grid\r\n    newGrid.push(randomItem);\r\n  }\r\n\r\n  console.log(newGrid);\r\n\r\n  return newGrid;\r\n}\r\n\r\nfunction alreadyAdded(grid, number) {\r\n  for (let i = 0; i < grid.length; i++) {\r\n    if (grid[i].number === number) return true;\r\n  }\r\n  return false;\r\n}\r\nexport default GenerateGrid;\r\n","import React from \"react\";\r\nimport { GridList, GridListTile } from \"@material-ui/core\";\r\n\r\n// function FinalNumbersTable(grid) {\r\n//   return (\r\n//     <GridList\r\n//       cellHeight={110}\r\n//       spacing={0}\r\n//       className=\"gridList\"\r\n//       cols={5}\r\n//       style={{ height: \"70%\", flex: 2 }}\r\n//     >\r\n//       {grid.map((item) => (\r\n//         <GridListTile\r\n//           className=\"gridListTile\"\r\n//           key={item.number}\r\n//           cols={1}\r\n//           rows={0.5}\r\n//         >\r\n//           <button className={item.picked ? \"btn touched\" : \"btn\"}>\r\n//             {item.number}\r\n//           </button>\r\n//         </GridListTile>\r\n//       ))}\r\n//     </GridList>\r\n//   );\r\n// }\r\n\r\n// function FinalBingo(bingo) {\r\n//   return (\r\n//     <GridList cellHeight={100} spacing={0} className=\"gridList\" cols={5}>\r\n//       {bingo.map((item) => (\r\n//         <GridListTile\r\n//           className=\"gridListTile\"\r\n//           key={item.letter}\r\n//           cols={1}\r\n//           rows={0.5}\r\n//         >\r\n//           <button\r\n//             className={\r\n//               item.gained ? \"bingoLetter bingoLetterGained\" : \"bingoLetter\"\r\n//             }\r\n//           >\r\n//             {item.letter}\r\n//           </button>\r\n//         </GridListTile>\r\n//       ))}\r\n//     </GridList>\r\n//   );\r\n// }\r\n\r\nfunction FinalTable(player, bingo, grid) {\r\n  return (\r\n    <div className=\"modalTableEach\">\r\n      <p className=\"modalTablePlayerId\">{player ? \"Computer\" : \"You\"}</p>\r\n\r\n      {/*computer bingo*/}\r\n      <GridList\r\n        cellHeight={100}\r\n        spacing={0}\r\n        className=\"inModalGridList\"\r\n        cols={5}\r\n      >\r\n        {bingo.map((item) => (\r\n          <GridListTile\r\n            className={\r\n              item.gained\r\n                ? \"inModalGridListTile inModalBingoGridListTileGained\"\r\n                : \"inModalGridListTile\"\r\n            }\r\n            key={item.letter}\r\n            cols={1}\r\n            rows={0.5}\r\n          >\r\n            <button\r\n              className={\r\n                item.gained\r\n                  ? \"inModalBingoLetter inModalBingoLetterGained\"\r\n                  : \"inModalBingoLetter\"\r\n              }\r\n            >\r\n              {item.letter}\r\n            </button>\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n      {/*computer space*/}\r\n      <GridList cellHeight={1} spacing={0} cols={5} style={{ flex: \"1\" }}>\r\n        {bingo.map((item) => (\r\n          <GridListTile key={item.letter} rows={0.2}></GridListTile>\r\n        ))}\r\n      </GridList>\r\n      {/*computer grid*/}\r\n      <GridList\r\n        cellHeight={100}\r\n        spacing={0}\r\n        className=\"inModalGridList\"\r\n        cols={5}\r\n      >\r\n        {grid.map((item) => (\r\n          <GridListTile\r\n            className=\"inModalGridListTile\"\r\n            key={item.number}\r\n            cols={1}\r\n            rows={0.5}\r\n          >\r\n            <button\r\n              className={\r\n                item.picked ? \"inModalBtn inModalTouched\" : \"inModalBtn\"\r\n              }\r\n            >\r\n              {item.number}\r\n            </button>\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\nexport default FinalTable;\r\n","import React, { Component } from \"react\";\r\nimport { GridList, GridListTile } from \"@material-ui/core\";\r\nimport ReactModal from \"react-modal\";\r\nimport BingoChecker from \"./BingoChecker\";\r\nimport chooseComputerIndex from \"./ComputerPlayer\";\r\nimport GenerateGrid from \"./GenerateGrid\";\r\nimport FinalTable from \"./FinalTable\";\r\nimport CachedIcon from \"@material-ui/icons/Cached\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass Bingo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      computerTurn: false,\r\n      bingo: [\r\n        { letter: \"B\", gained: false },\r\n        { letter: \"I\", gained: false },\r\n        { letter: \"N\", gained: false },\r\n        { letter: \"G\", gained: false },\r\n        { letter: \"O\", gained: false },\r\n      ],\r\n      items: GenerateGrid(),\r\n      computerBingo: [\r\n        { letter: \"B\", gained: false },\r\n        { letter: \"I\", gained: false },\r\n        { letter: \"N\", gained: false },\r\n        { letter: \"G\", gained: false },\r\n        { letter: \"O\", gained: false },\r\n      ],\r\n      computerGrid: GenerateGrid(),\r\n      gameEnded: false,\r\n      winner: 2, //winner 0: player    1: computer    2:Tie\r\n      winnerMessage: \"\",\r\n      winnerMessageColor: \"\",\r\n      playerScore: 0,\r\n    };\r\n  }\r\n\r\n  pick = async (pickedNumber) => {\r\n    let newPlayerList = this.state.items;\r\n    for (let i = 0; i < 25; i++) {\r\n      if (this.state.items[i].number === pickedNumber) {\r\n        newPlayerList[i].picked = true;\r\n        this.setState({\r\n          items: newPlayerList,\r\n        });\r\n      }\r\n    }\r\n    await this.checkForBingoUpdate();\r\n\r\n    let newComputerList = this.state.computerGrid;\r\n    for (let j = 0; j < 25; j++) {\r\n      if (this.state.computerGrid[j].number === pickedNumber) {\r\n        newComputerList[j].picked = true;\r\n        this.setState({\r\n          computerGrid: newComputerList,\r\n        });\r\n      }\r\n    }\r\n    await this.computerCheckForBingoUpdate();\r\n\r\n    await this.computerTurn();\r\n  };\r\n  checkForBingoUpdate = async () => {\r\n    const currentBingoScore = BingoChecker(this.state.items);\r\n\r\n    this.outputBingoState(currentBingoScore);\r\n  };\r\n\r\n  outputBingoState = (currentBingoScore) => {\r\n    let newBingoList = this.state.bingo;\r\n    for (let i = 0; i < currentBingoScore && i < 5; i++) {\r\n      newBingoList[i].gained = true;\r\n    }\r\n    this.setState({\r\n      bingo: newBingoList,\r\n    });\r\n    if (currentBingoScore >= 5) {\r\n      this.setState({\r\n        gameEnded: true,\r\n        winner: 0,\r\n        playerScore: this.state.playerScore + 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  computerPick = async () => {\r\n    if (!this.state.gameEnded) {\r\n      const computerChosenNumber = chooseComputerIndex(this.state.computerGrid);\r\n      let newPlayerList = this.state.items;\r\n      for (let i = 0; i < 25; i++) {\r\n        if (this.state.items[i].number === computerChosenNumber) {\r\n          newPlayerList[i].picked = true;\r\n          this.setState({\r\n            items: newPlayerList,\r\n          });\r\n        }\r\n      }\r\n      this.checkForBingoUpdate();\r\n\r\n      let newComputerList = this.state.computerGrid;\r\n      for (let j = 0; j < 25; j++) {\r\n        if (this.state.computerGrid[j].number === computerChosenNumber) {\r\n          newComputerList[j].picked = true;\r\n          this.setState({\r\n            computerGrid: newComputerList,\r\n          });\r\n        }\r\n      }\r\n      this.computerCheckForBingoUpdate();\r\n    }\r\n  };\r\n\r\n  computerCheckForBingoUpdate = async () => {\r\n    const currentBingoScore = BingoChecker(this.state.computerGrid);\r\n\r\n    this.computerOutputBingoState(currentBingoScore);\r\n  };\r\n\r\n  computerOutputBingoState = (currentBingoScore) => {\r\n    let newComputerBingoList = this.state.computerBingo;\r\n    for (let i = 0; i < currentBingoScore && i < 5; i++) {\r\n      newComputerBingoList[i].gained = true;\r\n    }\r\n    this.setState({\r\n      computerBingo: newComputerBingoList,\r\n    });\r\n    if (currentBingoScore >= 5) {\r\n      if (this.state.winner === 0) {\r\n        this.setState({\r\n          winner: 2,\r\n          winnerMessage: \"It's A Tie\",\r\n          winnerMessageColor: \"#ffff00\",\r\n        });\r\n      } else {\r\n        this.setState({\r\n          winner: 1,\r\n          winnerMessage: \"You Lost :( Try Again\",\r\n          winnerMessageColor: \"#ff0000\",\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        winner: 0,\r\n        winnerMessage: \"You Won!!\",\r\n        winnerMessageColor: \"rgb(6, 6, 138)\",\r\n      });\r\n    }\r\n  };\r\n\r\n  computerTurn = async () => {\r\n    this.setState({\r\n      computerTurn: true,\r\n    });\r\n    await this.sleep(800);\r\n    await this.computerPick();\r\n    this.setState({\r\n      computerTurn: false,\r\n    });\r\n  };\r\n\r\n  sleep = (ms) => {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  };\r\n\r\n  gameRestart = () => {\r\n    this.setState({\r\n      items: GenerateGrid(),\r\n      bingo: [\r\n        { letter: \"B\", gained: false },\r\n        { letter: \"I\", gained: false },\r\n        { letter: \"N\", gained: false },\r\n        { letter: \"G\", gained: false },\r\n        { letter: \"O\", gained: false },\r\n      ],\r\n      computerGrid: GenerateGrid(),\r\n      computerBingo: [\r\n        { letter: \"B\", gained: false },\r\n        { letter: \"I\", gained: false },\r\n        { letter: \"N\", gained: false },\r\n        { letter: \"G\", gained: false },\r\n        { letter: \"O\", gained: false },\r\n      ],\r\n      winner: 2,\r\n      gameEnded: false,\r\n      winnerMessage: \"\",\r\n      winnerMessageColor: \"\",\r\n    });\r\n    console.log(\"RESTARTING\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"gridRoot\">\r\n        <p className=\"score\"> Your Score: {this.state.playerScore}</p>\r\n        <Button\r\n          className=\"resetButton\"\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            if (window.confirm(\"Are you sure you wish to restart the game?\"))\r\n              this.gameRestart();\r\n          }}\r\n        >\r\n          <CachedIcon className=\"resetButtonIcon\" fontSize=\"large\" />\r\n        </Button>\r\n\r\n        {/*player bingo*/}\r\n        <GridList\r\n          style={{ height: 100, padding: 0, margin: 0 }}\r\n          cellHeight={100}\r\n          spacing={0}\r\n          className=\"gridList\"\r\n          cols={5}\r\n        >\r\n          {this.state.bingo.map((item) => (\r\n            <GridListTile\r\n              className={\r\n                item.gained\r\n                  ? \"gridListTile bingoGridListTileGained\"\r\n                  : \"gridListTile\"\r\n              }\r\n              key={item.letter}\r\n              cols={1}\r\n              rows={0.5}\r\n            >\r\n              <button\r\n                className={\r\n                  item.gained ? \"bingoLetter bingoLetterGained\" : \"bingoLetter\"\r\n                }\r\n              >\r\n                {item.letter}\r\n              </button>\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n        {/*player space*/}\r\n        {/* <GridList cellHeight={100} spacing={0} cols={5} style={{ flex: \"1\" }}>\r\n          {this.state.bingo.map((item) => (\r\n            <GridListTile key={item.letter} rows={0.2}></GridListTile>\r\n          ))}\r\n        </GridList> */}\r\n\r\n        {/*player grid*/}\r\n        <GridList cellHeight={100} spacing={0} className=\"gridList\" cols={5}>\r\n          {this.state.items.map((item) => (\r\n            <GridListTile\r\n              className=\"gridListTile\"\r\n              key={item.number}\r\n              cols={1}\r\n              rows={0.5}\r\n            >\r\n              <button\r\n                className={item.picked ? \"btn touched\" : \"btn\"}\r\n                disabled={item.picked || this.state.computerTurn}\r\n                onMouseDown={this.toggleTouched}\r\n                onMouseUp={this.handleMouseUp}\r\n                onClick={() => this.pick(item.number)}\r\n              >\r\n                {item.number}\r\n              </button>\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n\r\n        {/*space between*/}\r\n        {/* <GridList cellHeight={100} spacing={0} cols={5} style={{ flex: \"1\" }}>\r\n          {this.state.bingo.map((item) => (\r\n            <GridListTile key={item.letter} rows={0.2}></GridListTile>\r\n          ))}\r\n        </GridList> */}\r\n\r\n        <p\r\n          className={\r\n            this.state.computerTurn\r\n              ? \"computerPlayingTextShow\"\r\n              : \"computerPlayingTextHide\"\r\n          }\r\n        >\r\n          Computer is playing..\r\n        </p>\r\n        {/*computer bingo*/}\r\n        {/* <GridList cellHeight={100} spacing={0} className=\"gridList\" cols={5}>\r\n          {this.state.computerBingo.map((item) => (\r\n            <GridListTile\r\n              className=\"gridListTile\"\r\n              key={item.letter}\r\n              cols={1}\r\n              rows={0.5}\r\n            >\r\n              <button\r\n                className={\r\n                  item.gained ? \"bingoLetter bingoLetterGained\" : \"bingoLetter\"\r\n                }\r\n              >\r\n                {item.letter}\r\n              </button>\r\n            </GridListTile>\r\n          ))}\r\n        </GridList> */}\r\n        {/*computer space*/}\r\n        {/* <GridList cellHeight={100} spacing={0} cols={5} style={{ flex: \"1\" }}>\r\n          {this.state.bingo.map((item) => (\r\n            <GridListTile key={item.letter} rows={0.2}></GridListTile>\r\n          ))}\r\n        </GridList> */}\r\n\r\n        {/*computer grid*/}\r\n        {/* <GridList cellHeight={100} spacing={0} className=\"gridList\" cols={5}>\r\n          {this.state.computerGrid.map((item) => (\r\n            <GridListTile\r\n              className=\"gridListTile\"\r\n              key={item.number}\r\n              cols={1}\r\n              rows={0.5}\r\n            >\r\n              <button\r\n                className={item.picked ? \"btn touched\" : \"btn\"}\r\n                disabled={true}\r\n                onMouseDown={this.toggleTouched}\r\n                onMouseUp={this.handleMouseUp}\r\n                onClick={() => {}}\r\n              >\r\n                {item.number}\r\n              </button>\r\n            </GridListTile>\r\n          ))}\r\n        </GridList> */}\r\n\r\n        <ReactModal\r\n          style={{\r\n            border: \"1px solid #ccc\",\r\n          }}\r\n          isOpen={this.state.gameEnded}\r\n          contentLabel=\"Minimal Modal Example\"\r\n        >\r\n          <div className=\"modal\">\r\n            <div className=\"modalResultDiv\">\r\n              <div\r\n                className=\"resultsMessage\"\r\n                style={{ color: this.state.winnerMessageColor }}\r\n              >\r\n                {this.state.winnerMessage}\r\n              </div>\r\n              <p\r\n                className=\"score\"\r\n                style={{ marginBottom: 0, paddingBottom: 0 }}\r\n              >\r\n                {\" \"}\r\n                Your Score: {this.state.playerScore}\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"modalTablesDiv\">\r\n              {FinalTable(0, this.state.bingo, this.state.items)}\r\n              {FinalTable(1, this.state.computerBingo, this.state.computerGrid)}\r\n            </div>\r\n\r\n            <div className=\"modalPlayAgainDiv\">\r\n              <Button\r\n                onClick={this.gameRestart}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                NEW GAME\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </ReactModal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Bingo;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport BingoTable from \"./BingoTable\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\n// import { Helmet } from \"react-helmet\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Helmet>\r\n        <title>Bingo</title>\r\n      </Helmet> */}\r\n      <div className=\"leftAndRight\" />\r\n      <div className=\"center\">\r\n        {/* <div className=\"leftAndRight\">\r\n          \r\n        </div> */}\r\n        <h1 className=\"titleText\">Play 5x5 Bingo</h1>\r\n        <BingoTable />\r\n        {/* <div className=\"leftAndRight\" /> */}\r\n      </div>\r\n      <div className=\"leftAndRight\">\r\n        <a\r\n          style={{ backgroundColor: \"#000000\", color: \"#000000\" }}\r\n          href=\"https://github.com/haifanm/Bingo\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <GitHubIcon\r\n            style={{ position: \"absolute\", right: \"8\", bottom: \"8\" }}\r\n            fontSize=\"large\"\r\n          />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <title>Scratch - A simple note taking app</title>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}